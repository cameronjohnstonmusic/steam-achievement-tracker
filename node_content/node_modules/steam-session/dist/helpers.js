"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSpoofedHostname = exports.getDataForPlatformType = exports.isJwtValidForAudience = exports.decodeJwt = exports.API_HEADERS = exports.eresultError = void 0;
const crypto_1 = require("crypto");
const os_1 = require("os");
const querystring_1 = require("querystring");
const EResult_1 = __importDefault(require("./enums-steam/EResult"));
const EAuthTokenPlatformType_1 = __importDefault(require("./enums-steam/EAuthTokenPlatformType"));
const EOSType_1 = __importDefault(require("./enums-steam/EOSType"));
const CHROME_USER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36';
function eresultError(result, errorMessage) {
    let resultMsg = result.toString(); // this is the numeric value, as a string
    resultMsg = EResult_1.default[resultMsg] || resultMsg; // this is now the string representation of the EResult value
    let err = new Error(errorMessage || resultMsg);
    // @ts-ignore
    err.eresult = result;
    return err;
}
exports.eresultError = eresultError;
exports.API_HEADERS = {
    accept: 'application/json, text/plain, */*',
    'sec-fetch-site': 'cross-site',
    'sec-fetch-mode': 'cors',
    'sec-fetch-dest': 'empty'
};
function decodeJwt(jwt) {
    let parts = jwt.split('.');
    if (parts.length != 3) {
        throw new Error('Invalid JWT');
    }
    let standardBase64 = parts[1].replace(/-/g, '+')
        .replace(/_/g, '/');
    return JSON.parse(Buffer.from(standardBase64, 'base64').toString('utf8'));
}
exports.decodeJwt = decodeJwt;
function isJwtValidForAudience(jwt, audience, steamId) {
    let decodedToken;
    try {
        decodedToken = decodeJwt(jwt);
    }
    catch (ex) {
        return false;
    }
    // Check if the steamid matches
    if (steamId && decodedToken.sub != steamId) {
        return false;
    }
    return (decodedToken.aud || []).includes(audience);
}
exports.isJwtValidForAudience = isJwtValidForAudience;
function getDataForPlatformType(platformType) {
    switch (platformType) {
        case EAuthTokenPlatformType_1.default.SteamClient:
            let refererQuery = {
                IN_CLIENT: 'true',
                WEBSITE_ID: 'Client',
                LOCAL_HOSTNAME: getSpoofedHostname(),
                WEBAPI_BASE_URL: 'https://api.steampowered.com/',
                STORE_BASE_URL: 'https://store.steampowered.com/',
                USE_POPUPS: 'true',
                DEV_MODE: 'false',
                LANGUAGE: 'english',
                PLATFORM: 'windows',
                COUNTRY: 'US',
                LAUNCHER_TYPE: '0',
                IN_LOGIN: 'true'
            };
            return {
                websiteId: 'Client',
                headers: {
                    'user-agent': 'Mozilla/5.0 (Windows; U; Windows NT 10.0; en-US; Valve Steam Client/default/1665786434; ) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36',
                    origin: 'https://steamloopback.host',
                    referer: 'https://steamloopback.host/index.html?' + (0, querystring_1.stringify)(refererQuery)
                },
                deviceDetails: {
                    device_friendly_name: refererQuery.LOCAL_HOSTNAME,
                    platform_type: EAuthTokenPlatformType_1.default.SteamClient,
                    os_type: EOSType_1.default.Windows10,
                    // EGamingDeviceType full definition is unknown, but 1 appears to be a desktop PC
                    gaming_device_type: 1
                }
            };
        case EAuthTokenPlatformType_1.default.WebBrowser:
            return {
                websiteId: 'Community',
                headers: {
                    'user-agent': CHROME_USER_AGENT,
                    origin: 'https://steamcommunity.com',
                    referer: 'https://steamcommunity.com'
                },
                deviceDetails: {
                    device_friendly_name: CHROME_USER_AGENT,
                    platform_type: EAuthTokenPlatformType_1.default.WebBrowser
                }
            };
        case EAuthTokenPlatformType_1.default.MobileApp:
            return {
                websiteId: 'Mobile',
                headers: {
                    'user-agent': 'okhttp/3.12.12',
                    cookie: 'mobileClient=android; mobileClientVersion=777777 3.0.0'
                },
                deviceDetails: {
                    device_friendly_name: 'Galaxy S22',
                    platform_type: EAuthTokenPlatformType_1.default.MobileApp,
                    os_type: EOSType_1.default.AndroidUnknown,
                    gaming_device_type: 528 // dunno
                }
            };
        default:
            let err = new Error('Unsupported platform type');
            err.platformType = platformType;
            throw err;
    }
}
exports.getDataForPlatformType = getDataForPlatformType;
function getSpoofedHostname() {
    let hash = (0, crypto_1.createHash)('sha1');
    hash.update((0, os_1.hostname)());
    let sha1 = hash.digest();
    const CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    let output = 'DESKTOP-';
    for (let i = 0; i < 7; i++) {
        output += CHARS[sha1[i] % CHARS.length];
    }
    return output;
}
exports.getSpoofedHostname = getSpoofedHostname;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oZWxwZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLG1DQUFrQztBQUNsQywyQkFBNEI7QUFDNUIsNkNBQTJEO0FBRTNELG9FQUE0QztBQUM1QyxrR0FBMEU7QUFFMUUsb0VBQTRDO0FBRTVDLE1BQU0saUJBQWlCLEdBQUcsaUhBQWlILENBQUM7QUFFNUksU0FBZ0IsWUFBWSxDQUFDLE1BQWMsRUFBRSxZQUFvQjtJQUNoRSxJQUFJLFNBQVMsR0FBVSxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyx5Q0FBeUM7SUFDbkYsU0FBUyxHQUFHLGlCQUFPLENBQUMsU0FBUyxDQUFDLElBQUksU0FBUyxDQUFDLENBQUMsNkRBQTZEO0lBRTFHLElBQUksR0FBRyxHQUFHLElBQUksS0FBSyxDQUFDLFlBQVksSUFBSSxTQUFTLENBQUMsQ0FBQztJQUMvQyxhQUFhO0lBQ2IsR0FBRyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7SUFDckIsT0FBTyxHQUFHLENBQUM7QUFDWixDQUFDO0FBUkQsb0NBUUM7QUFFWSxRQUFBLFdBQVcsR0FBRztJQUMxQixNQUFNLEVBQUUsbUNBQW1DO0lBQzNDLGdCQUFnQixFQUFFLFlBQVk7SUFDOUIsZ0JBQWdCLEVBQUUsTUFBTTtJQUN4QixnQkFBZ0IsRUFBRSxPQUFPO0NBQ3pCLENBQUM7QUFFRixTQUFnQixTQUFTLENBQUMsR0FBVTtJQUNuQyxJQUFJLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLElBQUksS0FBSyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7UUFDdEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztLQUMvQjtJQUVELElBQUksY0FBYyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQztT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