"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("crypto");
const https_1 = __importDefault(require("https"));
const socks_proxy_agent_1 = require("socks-proxy-agent");
const stdlib_1 = __importDefault(require("@doctormckay/stdlib"));
const steamid_1 = __importDefault(require("steamid"));
const AuthenticationClient_1 = __importDefault(require("./AuthenticationClient"));
const WebApiTransport_1 = __importDefault(require("./transports/WebApiTransport"));
const helpers_1 = require("./helpers");
const ESessionPersistence_1 = __importDefault(require("./enums-steam/ESessionPersistence"));
const EAuthTokenPlatformType_1 = __importDefault(require("./enums-steam/EAuthTokenPlatformType"));
const WebClient_1 = __importDefault(require("./WebClient"));
class LoginApprover {
    constructor(accessToken, sharedSecret, options) {
        let agent = new https_1.default.Agent({ keepAlive: true });
        if (options.httpProxy && options.socksProxy) {
            throw new Error('Cannot specify both httpProxy and socksProxy at the same time');
        }
        if (options.httpProxy) {
            agent = stdlib_1.default.HTTP.getProxyAgent(true, options.httpProxy);
        }
        else if (options.socksProxy) {
            agent = new socks_proxy_agent_1.SocksProxyAgent(options.socksProxy);
        }
        this._webClient = new WebClient_1.default({ agent });
        this.accessToken = accessToken;
        this.sharedSecret = sharedSecret;
        this._handler = new AuthenticationClient_1.default(EAuthTokenPlatformType_1.default.MobileApp, options.transport || new WebApiTransport_1.default(this._webClient), this._webClient);
    }
    get steamID() {
        if (this.accessToken) {
            let decodedToken = (0, helpers_1.decodeJwt)(this.accessToken);
            return new steamid_1.default(decodedToken.sub);
        }
        else {
            return null;
        }
    }
    get accessToken() { return this._accessToken; }
    set accessToken(token) {
        let decoded = (0, helpers_1.decodeJwt)(token);
        let aud = decoded.aud || [];
        // Is it an access token and not a refresh token?
        if (aud.includes('derive')) {
            throw new Error('Provided token is a refresh token, not an access token');
        }
        if (!aud.includes('mobile')) {
            throw new Error('Provided token is not valid for MobileApp platform usage');
        }
        this._accessToken = token;
    }
    get _secretAsBuffer() {
        if (Buffer.isBuffer(this.sharedSecret)) {
            return this.sharedSecret;
        }
        if (this.sharedSecret.match(/^[0-9a-f]{40}$/i)) {
            // Looks like it's hex
            return Buffer.from(this.sharedSecret, 'hex');
        }
        // It must be base64
        return Buffer.from(this.sharedSecret, 'base64');
    }
    async getAuthSessionInfo(qrChallengeUrl) {
        let { clientId } = decodeQrUrl(qrChallengeUrl);
        let result = await this._handler.getAuthSessionInfo(this._accessToken, { clientId });
        return {
            ip: result.ip,
            location: {
                geoloc: result.geoloc,
                city: result.city,
                state: result.state
            },
            platformType: result.platformType,
            deviceFriendlyName: result.deviceFriendlyName,
            version: result.version,
            loginHistory: result.loginHistory,
            locationMismatch: result.locationMismatch,
            highUsageLogin: result.highUsageLogin,
            requestedPersistence: result.requestedPersistence
        };
    }
    async approveAuthSession(details) {
        let { clientId, version } = decodeQrUrl(details.qrChallengeUrl);
        let signatureData = Buffer.alloc(2 + 8 + 8);
        signatureData.writeUInt16LE(version, 0);
        signatureData.writeBigUInt64LE(BigInt(clientId), 2);
        signatureData.writeBigUInt64LE(BigInt(this.steamID), 10);
        let signature = (0, crypto_1.createHmac)('sha256', this._secretAsBuffer)
            .update(signatureData)
            .digest();
        await this._handler.submitMobileConfirmation(this.accessToken, {
            version,
            clientId,
            steamId: this.steamID.getSteamID64(),
            signature,
            confirm: details.approve,
            persistence: details.persistence || ESessionPersistence_1.default.Persistent
        });
    }
}
exports.default = LoginApprover;
function decodeQrUrl(qrUrl) {
    let match = qrUrl.match(/^https?:\/\/s\.team\/q\/(\d+)\/(\d+)(\?|$)/);
    if (!match) {
        throw new Error('Invalid QR code URL');
    }
    return { clientId: match[2], version: parseInt(match[1], 10) };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9naW5BcHByb3Zlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9Mb2dpbkFwcHJvdmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsbUNBQWtDO0FBQ2xDLGtEQUEwQjtBQUMxQix5REFBa0Q7QUFDbEQsaUVBQXlDO0FBQ3pDLHNEQUE4QjtBQUU5QixrRkFBMEQ7QUFDMUQsbUZBQTJEO0FBRTNELHVDQUFvQztBQUNwQyw0RkFBb0U7QUFDcEUsa0dBQTBFO0FBQzFFLDREQUFvQztBQUVwQyxNQUFxQixhQUFhO0lBT2pDLFlBQVksV0FBbUIsRUFBRSxZQUEyQixFQUFFLE9BQTRCO1FBQ3pGLElBQUksS0FBSyxHQUFHLElBQUksZUFBSyxDQUFDLEtBQUssQ0FBQyxFQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO1FBQy9DLElBQUksT0FBTyxDQUFDLFNBQVMsSUFBSSxPQUFPLENBQUMsVUFBVSxFQUFFO1lBQzVDLE1BQU0sSUFBSSxLQUFLLENBQUMsK0RBQStELENBQUMsQ0FBQztTQUNqRjtRQUVELElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRTtZQUN0QixLQUFLLEdBQUcsZ0JBQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDM0Q7YUFBTSxJQUFJLE9BQU8sQ0FBQyxVQUFVLEVBQUU7WUFDOUIsS0FBSyxHQUFHLElBQUksbUNBQWUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDaEQ7UUFFRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksbUJBQVMsQ0FBQyxFQUFDLEtBQUssRUFBQyxDQUFDLENBQUM7UUFFekMsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDL0IsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDakMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLDhCQUFvQixDQUFDLGdDQUFzQixD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