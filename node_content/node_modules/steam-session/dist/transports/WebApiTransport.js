"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const helpers_1 = require("../helpers");
const debug = (0, debug_1.default)('steam-session:WebApiTransport');
// Assume everything is a POST request unless it's specifically listed as a GET request
const GET_REQUESTS = [
    'IAuthenticationService/GetPasswordRSAPublicKey/v1'
];
const WEBAPI_BASE = 'https://api.steampowered.com';
class WebApiTransport {
    constructor(client) {
        this._client = client;
    }
    async sendRequest(request) {
        let urlPath = `I${request.apiInterface}Service/${request.apiMethod}/v${request.apiVersion}`;
        let url = `${WEBAPI_BASE}/${urlPath}/`;
        let method = GET_REQUESTS.includes(urlPath) ? 'GET' : 'POST';
        let headers = { ...helpers_1.API_HEADERS, ...(request.headers || {}) };
        let queryString = {};
        let form = {};
        if (request.accessToken) {
            queryString.access_token = request.accessToken;
        }
        if (request.requestData && request.requestData.length > 0) {
            (method == 'GET' ? queryString : form).input_protobuf_encoded = request.requestData.toString('base64');
        }
        debug('%s %s %o %o', method, url, queryString, form);
        let result;
        if (method == 'GET') {
            result = await this._client.get(url, { queryString, headers });
        }
        else if (Object.keys(form).length == 0) {
            result = await this._client.post(url, null, { queryString, headers });
        }
        else {
            result = await this._client.postEncoded(url, form, 'multipart', { queryString, headers });
        }
        if (result.res.statusCode < 200 || result.res.statusCode >= 300) {
            let err = new Error(`WebAPI error ${result.res.statusCode}`);
            err.code = result.res.statusCode;
            throw err;
        }
        let apiResponse = {};
        let eresultHeader = result.res.headers['x-eresult'];
        let errorMessageHeader = result.res.headers['x-error_message'];
        if (typeof eresultHeader == 'string') {
            apiResponse.result = parseInt(eresultHeader);
        }
        if (typeof errorMessageHeader == 'string') {
            apiResponse.errorMessage = errorMessageHeader;
        }
        if (result.body && result.body.length > 0) {
            apiResponse.responseData = result.body;
        }
        return apiResponse;
    }
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    close() { }
}
exports.default = WebApiTransport;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2ViQXBpVHJhbnNwb3J0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RyYW5zcG9ydHMvV2ViQXBpVHJhbnNwb3J0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsa0RBQWdDO0FBSWhDLHdDQUF1QztBQUV2QyxNQUFNLEtBQUssR0FBRyxJQUFBLGVBQVcsRUFBQywrQkFBK0IsQ0FBQyxDQUFDO0FBRTNELHVGQUF1RjtBQUN2RixNQUFNLFlBQVksR0FBRztJQUNwQixtREFBbUQ7Q0FDbkQsQ0FBQztBQUVGLE1BQU0sV0FBVyxHQUFHLDhCQUE4QixDQUFDO0FBT25ELE1BQXFCLGVBQWU7SUFHbkMsWUFBWSxNQUFpQjtRQUM1QixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRUQsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFtQjtRQUNwQyxJQUFJLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxZQUFZLFdBQVcsT0FBTyxDQUFDLFNBQVMsS0FBSyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDNUYsSUFBSSxHQUFHLEdBQUcsR0FBRyxXQUFXLElBQUksT0FBTyxHQUFHLENBQUM7UUFDdkMsSUFBSSxNQUFNLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDN0QsSUFBSSxPQUFPLEdBQUcsRUFBQyxHQUFHLHFCQUFXLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLEVBQUMsQ0FBQztRQUUzRCxJQUFJLFdBQVcsR0FBTyxFQUFFLENBQUM7UUFDekIsSUFBSSxJQUFJLEdBQU8sRUFBRSxDQUFDO1FBRWxCLElBQUksT0FBTyxDQUFDLFdBQVcsRUFBRTtZQUN4QixXQUFXLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUM7U0FDL0M7UUFFRCxJ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