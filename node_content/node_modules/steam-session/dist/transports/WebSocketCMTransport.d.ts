/// <reference types="node" />
/// <reference types="node" />
import ITransport, { ApiRequest, ApiResponse } from './ITransport';
import EMsg from '../enums-steam/EMsg';
import WebClient from '../WebClient';
import { Agent } from 'https';
interface CmServer {
    endpoint: string;
    legacy_endpoint?: string;
    type: string;
    dc?: string;
    realm: string;
    load?: string;
    wtd_load?: string;
}
export default class WebSocketCMTransport implements ITransport {
    _webClient: WebClient;
    _agent: Agent;
    _websocket: any;
    _jobs: any;
    _clientSessionId: number;
    constructor(webClient: WebClient, agent: Agent);
    sendRequest(request: ApiRequest): Promise<ApiResponse>;
    close(): void;
    _connectToCM(): Promise<void>;
    _fetchCMList(): Promise<CmServer[]>;
    _handleWsMessage(msg: Buffer): void;
    _processMultiMsg(body: Buffer): Promise<void>;
    _sendMessage(eMsg: EMsg, body: Buffer, serviceMethodName?: string): Promise<any>;
}
export {};
//# sourceMappingURL=WebSocketCMTransport.d.ts.map