"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const https_1 = __importDefault(require("https"));
const querystring_1 = __importDefault(require("querystring"));
const stream_1 = require("stream");
const crypto_1 = require("crypto");
const debug = (0, debug_1.default)('steam-session:WebClient');
class WebClient {
    constructor(options) {
        this._agent = options.agent || new https_1.default.Agent({ keepAlive: true });
    }
    async get(url, options) {
        return await this._req(buildUrl(url, options), null, buildRequestOptions('GET', options));
    }
    async post(url, body, options) {
        return await this._req(buildUrl(url, options), body, buildRequestOptions('POST', options));
    }
    async postEncoded(url, body, encoding = 'json', options) {
        let encodedBody, contentType;
        switch (encoding) {
            case 'json':
                contentType = 'application/json';
                encodedBody = JSON.stringify(body);
                break;
            case 'url':
                contentType = 'application/x-www-form-urlencoded';
                encodedBody = querystring_1.default.stringify(body);
                break;
            case 'multipart':
                let boundary = '-----------------------------' + (0, crypto_1.randomBytes)(20).toString('hex');
                contentType = `multipart/form-data; boundary=${boundary}`;
                let encodedBodyParts = [];
                for (let i in body) {
                    let head = `--${boundary}\r\nContent-Disposition: form-data; name="${i}"\r\n\r\n`;
                    let tail = '\r\n';
                    encodedBodyParts = encodedBodyParts.concat([
                        Buffer.from(head, 'utf8'),
                        Buffer.isBuffer(body[i]) ? body[i] : Buffer.from(body[i].toString(), 'utf8'),
                        Buffer.from(tail, 'utf8')
                    ]);
                }
                encodedBodyParts.push(Buffer.from(`--${boundary}--\r\n`, 'utf8'));
                encodedBody = Buffer.concat(encodedBodyParts);
                break;
            default:
                throw new Error(`Unsupported encoding "${encoding}"`);
        }
        return await this._req(buildUrl(url, options), encodedBody, buildRequestOptions('POST', options, { 'content-type': contentType }));
    }
    _req(url, body, options) {
        return new Promise((resolve, reject) => {
            let parsedUrl = urlToHttpOptions(new URL(url));
            if (Buffer.isBuffer(body) || typeof body == 'string') {
                options.headers = options.headers || {};
                options.headers['content-length'] = Buffer.byteLength(body);
            }
            else if (!body) {
                options.headers = options.headers || {};
                options.headers['content-length'] = 0;
            }
            let req = https_1.default.request({ ...parsedUrl, ...options, agent: this._agent }, (res) => {
                let chunks = [];
                res.on('data', chunk => chunks.push(chunk));
                res.on('end', () => {
                    let body = Buffer.concat(chunks);
                    let contentType = (res.headers['content-type'] || '').split(';')[0].toLowerCase().trim();
                    if (contentType.startsWith('text/') || contentType == 'application/json') {
                        body = body.toString('utf8');
                    }
                    if (contentType == 'application/json') {
                        try {
                            body = JSON.parse(body);
                        }
                        catch (ex) {
                            debug('error parsing json response %o', ex);
                        }
                    }
                    resolve({ res, body });
                });
            });
            req.on('error', reject);
            if (body instanceof stream_1.Readable) {
                body.pipe(req);
            }
            else if (Buffer.isBuffer(body) || typeof body == 'string') {
                req.end(body);
            }
            else {
                req.end();
            }
        });
    }
}
exports.default = WebClient;
function buildUrl(url, options) {
    options = options || {};
    if (options.queryString && Object.keys(options.queryString).length > 0) {
        url += url.includes('?') ? '&' : '?';
        url += querystring_1.default.stringify(options.queryString);
    }
    return url;
}
function buildRequestOptions(method, options, extraHeaders) {
    options = options || {};
    let output = { method };
    if (options.headers) {
        output.headers = options.headers;
    }
    if (extraHeaders) {
        output.headers = output.headers || {};
        output.headers = { ...output.headers, ...extraHeaders };
    }
    output.rejectUnauthorized = false;
    return output;
}
// Polyfill for node versions prior to 14.18.0
function urlToHttpOptions(url) {
    let options = {
        protocol: url.protocol,
        hostname: typeof url.hostname == 'string' &&
            url.hostname.startsWith('[')
            ? url.hostname.slice(1, -1)
            : url.hostname,
        hash: url.hash,
        search: url.search,
        pathname: url.pathname,
        path: `${url.pathname || ''}${url.search || ''}`,
        href: url.href,
    };
    if (url.port !== '') {
        options.port = Number(url.port);
    }
    if (url.username || url.password) {
        options.auth = [url.username, url.password].map(v => decodeURIComponent(v || '')).join(':');
    }
    return options;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2ViQ2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL1dlYkNsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGtEQUFnQztBQUNoQyxrREFBMEI7QUFDMUIsOERBQTZEO0FBRTdELG1DQUFrRDtBQUNsRCxtQ0FBbUM7QUFFbkMsTUFBTSxLQUFLLEdBQUcsSUFBQSxlQUFXLEVBQUMseUJBQXlCLENBQUMsQ0FBQztBQWdCckQsTUFBcUIsU0FBUztJQUc3QixZQUFZLE9BQXlCO1FBQ3BDLElBQUksQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLEtBQUssSUFBSSxJQUFJLGVBQUssQ0FBQyxLQUFLLENBQUMsRUFBQyxTQUFTLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRUQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFXLEVBQUUsT0FBd0I7UUFDOUMsT0FBTyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsbUJBQW1CLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDM0YsQ0FBQztJQUVELEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBVyxFQUFFLElBQW9CLEVBQUUsT0FBd0I7UUFDckUsT0FBTyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsbUJBQW1CLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDNUYsQ0FBQztJQUVELEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBVyxFQUFFLElBQVksRUFBRSxRQUFRLEdBQUcsTUFBTSxFQUFFLE9BQXdCO1FBQ3ZGLElBQUksV0FBeUIsRUFDNUIsV0FBa0IsQ0FBQztRQUNwQixRQUFRLFFBQVEsRUFBRTtZQUNqQixLQUFLLE1BQU07Z0JBQ1YsV0FBVyxHQUFH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