/// <reference types="node" />
/// <reference types="node" />
import EventEmitter from 'events';
import SteamID from 'steamid';
import AuthenticationClient from './AuthenticationClient';
import WebClient from './WebClient';
import { ConstructorOptions, StartLoginSessionWithCredentialsDetails, StartSessionResponse } from './interfaces-external';
import { StartAuthSessionResponse } from './interfaces-internal';
import EAuthTokenPlatformType from './enums-steam/EAuthTokenPlatformType';
import Timeout = NodeJS.Timeout;
export default class LoginSession extends EventEmitter {
    loginTimeout: number;
    _accountName?: string;
    _accessToken?: string;
    _refreshToken?: string;
    _platformType: EAuthTokenPlatformType;
    _webClient: WebClient;
    _handler: AuthenticationClient;
    _steamGuardCode?: string;
    _steamGuardMachineToken?: string;
    _startSessionResponse?: StartAuthSessionResponse;
    _hadRemoteInteraction?: boolean;
    _pollingStartedTime?: number;
    _pollTimer?: Timeout;
    _pollingCanceled?: boolean;
    /**
     * @param {EAuthTokenPlatformType} platformType
     * @param {ConstructorOptions} [options]
     */
    constructor(platformType: EAuthTokenPlatformType, options?: ConstructorOptions);
    get steamID(): SteamID;
    get accountName(): string;
    get accessToken(): string;
    set accessToken(token: string);
    get refreshToken(): string;
    set refreshToken(token: string);
    get steamGuardMachineToken(): string;
    get _defaultWebsiteId(): "Client" | "Community" | "Mobile";
    _verifyStarted(mustHaveSteamId?: boolean): void;
    startWithCredentials(details: StartLoginSessionWithCredentialsDetails): Promise<StartSessionResponse>;
    startWithQR(): Promise<StartSessionResponse>;
    _processStartSessionResponse(): Promise<StartSessionResponse>;
    forcePoll(): void;
    _doPoll(): Promise<void>;
    /**
     * @returns {boolean} - true if code submitted successfully, false if code wasn't valid or no code available
     */
    _attemptEmailCodeAuth(): Promise<boolean>;
    _attemptTotpCodeAuth(): Promise<boolean>;
    submitSteamGuardCode(authCode: string): Promise<void>;
    cancelLoginAttempt(): boolean;
    getWebCookies(): Promise<string[]>;
}
//# sourceMappingURL=LoginSession.d.ts.map